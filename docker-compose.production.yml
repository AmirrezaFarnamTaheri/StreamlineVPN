version: '3.8'

services:
  streamline-vpn:
    image: streamlinevpn/streamlinevpn:latest
    container_name: streamline-vpn-prod
    restart: always
    environment:
      - STREAMLINE_ENV=production
      - STREAMLINE_LOG_LEVEL=INFO
      - STREAMLINE_SOURCES_CONFIG=/app/config/sources.yaml
      - STREAMLINE_REDIS_URL=redis://redis:6379/0
      - STREAMLINE_DB_URL=postgresql://postgres:password@postgres:5432/streamlinevpn
      - STREAMLINE_API_KEY=${API_KEY}
      - STREAMLINE_SECRET_KEY=${SECRET_KEY}
      - STREAMLINE_MAX_CONCURRENT=100
      - STREAMLINE_CACHE_ENABLED=true
    ports:
      - "8000:8000"
    volumes:
      - ./config:/app/config:ro
      - ./output:/app/output
      - ./logs:/app/logs
    depends_on:
      - redis
      - postgres
    networks:
      - streamline-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '1'
          memory: 1G

  redis:
    image: redis:7-alpine
    container_name: streamline-redis
    restart: always
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis-data:/data
    networks:
      - streamline-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  postgres:
    image: postgres:15-alpine
    container_name: streamline-postgres
    restart: always
    environment:
      - POSTGRES_DB=streamlinevpn
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - streamline-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  nginx:
    image: nginx:alpine
    container_name: streamline-nginx
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./static:/usr/share/nginx/html:ro
    depends_on:
      - streamline-vpn
    networks:
      - streamline-network

  prometheus:
    image: prom/prometheus:latest
    container_name: streamline-prometheus
    restart: always
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - streamline-network

  grafana:
    image: grafana/grafana:latest
    container_name: streamline-grafana
    restart: always
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_INSTALL_PLUGINS=redis-datasource
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    networks:
      - streamline-network

volumes:
  redis-data:
  postgres-data:
  prometheus-data:
  grafana-data:

networks:
  streamline-network:
    driver: bridge
