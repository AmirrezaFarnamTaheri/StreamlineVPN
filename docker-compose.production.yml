version: '3.8'

# Production Docker Compose Configuration for StreamlineVPN
# ===========================================================

services:
  # Main API service
  streamline-api:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: streamline-api-prod
    restart: unless-stopped
    
    environment:
      # Core settings
      - STREAMLINE_ENV=production
      - STREAMLINE_DEBUG=false
      - STREAMLINE_LOG_LEVEL=INFO
      - LOG_FORMAT=json
      
      # Server configuration
      - API_HOST=0.0.0.0
      - API_PORT=8080
      - WORKERS=4
      
      # Database
      - DATABASE_URL=postgresql://streamline:${DB_PASSWORD:-streamline123}@postgres:5432/streamline_vpn
      
      # Redis configuration
      - CACHE_ENABLED=true
      - STREAMLINE_REDIS__NODES=[{"host":"redis","port":"6379"}]
      
      # Security
      - SECRET_KEY=${SECRET_KEY:-change-this-secret-key-in-production-min-32-chars}
      - JWT_EXPIRATION=86400
      
      # CORS (adjust for your domains)
      - ALLOWED_ORIGINS=["https://your-domain.com","https://www.your-domain.com"]
      - ALLOWED_METHODS=["GET","POST","PUT","DELETE","OPTIONS"]
      - ALLOWED_HEADERS=["Content-Type","Authorization"]
      - ALLOW_CREDENTIALS=true
      
      # Performance
      - VPN_CONCURRENT_LIMIT=100
      - VPN_TIMEOUT=60
      - CACHE_L1_SIZE=512
      
      # Features
      - SCHEDULER_ENABLED=true
      - METRICS_ENABLED=true
      - HEALTH_CHECKS_ENABLED=true
    
    ports:
      - "8080:8080"
    
    volumes:
      - ./config:/app/config:ro
      - streamline-data:/app/data
      - streamline-logs:/app/logs
      - streamline-output:/app/output
    
    networks:
      - streamline-network
    
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G
    
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "10"

  # Web interface service (optional - can use CDN instead)
  streamline-web:
    build:
      context: .
      dockerfile: Dockerfile.web
      target: production
    container_name: streamline-web-prod
    restart: unless-stopped
    
    environment:
      - WEB_HOST=0.0.0.0
      - WEB_PORT=8000
      - API_BASE_URL=http://streamline-api:8080
      - STREAMLINE_ENV=production
    
    ports:
      - "8000:8000"
    
    volumes:
      - ./docs:/app/docs:ro
      - streamline-logs:/app/logs
    
    networks:
      - streamline-network
    
    depends_on:
      - streamline-api
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

  # PostgreSQL database
  postgres:
    image: postgres:15-alpine
    container_name: streamline-postgres-prod
    restart: unless-stopped
    
    environment:
      - POSTGRES_DB=streamline_vpn
      - POSTGRES_USER=streamline
      - POSTGRES_PASSWORD=${DB_PASSWORD:-streamline123}
      - PGDATA=/var/lib/postgresql/data/pgdata
    
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./scripts/postgres-init:/docker-entrypoint-initdb.d:ro
    
    networks:
      - streamline-network
    
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U streamline -d streamline_vpn"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "5"

  # Redis cache
  redis:
    image: redis:7-alpine
    container_name: streamline-redis-prod
    restart: unless-stopped
    
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    
    volumes:
      - redis-data:/data
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf:ro
    
    networks:
      - streamline-network
    
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 30s
    
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    
    logging:
      driver: "json-file"
      options:
        max-size: "25m"
        max-file: "3"

  # Nginx reverse proxy and load balancer
  nginx:
    image: nginx:alpine
    container_name: streamline-nginx-prod
    restart: unless-stopped
    
    ports:
      - "80:80"
      - "443:443"
    
    volumes:
      - ./config/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./config/nginx/conf.d:/etc/nginx/conf.d:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx-logs:/var/log/nginx
    
    networks:
      - streamline-network
    
    depends_on:
      - streamline-api
      - streamline-web
    
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.25'
          memory: 128M

  # Monitoring with Prometheus (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: streamline-prometheus-prod
    restart: unless-stopped
    
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    
    volumes:
      - ./config/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    
    networks:
      - streamline-network
    
    ports:
      - "9090:9090"
    
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    
    profiles:
      - monitoring

  # Grafana for metrics visualization (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: streamline-grafana-prod
    restart: unless-stopped
    
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
      - GF_USERS_ALLOW_SIGN_UP=false
    
    volumes:
      - grafana-data:/var/lib/grafana
      - ./config/grafana/provisioning:/etc/grafana/provisioning:ro
    
    networks:
      - streamline-network
    
    ports:
      - "3000:3000"
    
    depends_on:
      - prometheus
    
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    
    profiles:
      - monitoring

  # Log aggregation with Loki (optional)
  loki:
    image: grafana/loki:latest
    container_name: streamline-loki-prod
    restart: unless-stopped
    
    command: -config.file=/etc/loki/local-config.yaml
    
    volumes:
      - loki-data:/tmp/loki
      - ./config/loki/loki-config.yml:/etc/loki/local-config.yaml:ro
    
    networks:
      - streamline-network
    
    ports:
      - "3100:3100"
    
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    
    profiles:
      - logging

networks:
  streamline-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  # Application data
  streamline-data:
    driver: local
  streamline-logs:
    driver: local
  streamline-output:
    driver: local
  
  # Database data
  postgres-data:
    driver: local
  redis-data:
    driver: local
  
  # Monitoring data
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  loki-data:
    driver: local
  
  # Web server logs
  nginx-logs:
    driver: local

# Production deployment notes:
# 1. Set strong passwords in environment variables
# 2. Configure SSL certificates in ./ssl directory
# 3. Update CORS origins for your domain
# 4. Review resource limits based on your hardware
# 5. Set up external monitoring and backups
# 6. Configure log rotation and retention
# 7. Use Docker secrets for sensitive data in Swarm mode