                except Exception:
                    pass
                await websocket.accept()
                try:
                    with open(root/"logs"/"ws_trace.log", "a", encoding="utf-8") as f:
                        f.write(f"ACCEPTED /ws at {datetime.now().isoformat()}\n")
                except Exception:
                    pass
            except Exception as e:
                try:
                    with open(root/"logs"/"ws_trace.log", "a", encoding="utf-8") as f:
                        f.write(f"ERROR /ws before accept: {e}\n")
                except Exception:
                    pass
                raise
            try:
                while True:
                    if self.merger:
                        stats = await self.merger.get_statistics()
                        await websocket.send_json({"type": "statistics", "data": stats, "timestamp": datetime.now().isoformat()})
                    await asyncio.sleep(5)
            except WebSocketDisconnect:  # pragma: no cover - depends on client
                logger.info("WebSocket client disconnected")
            except Exception as e:  # pragma: no cover
                logger.error("WebSocket error: %s", e)

        # Compatibility: echo/ping endpoint used by tests and some clients
        @app.websocket("/ws/{client_id}")
        async def websocket_client_endpoint(websocket: WebSocket, client_id: str) -> None:
            try:
                try:
                    root = Path(__file__).resolve().parents[3]
                    (root/"logs").mkdir(parents=True, exist_ok=True)
                    with open(root/"logs"/"ws_trace.log", "a", encoding="utf-8") as f:
                        f.write(f"ENTER /ws/{{client_id}} id={client_id} at {datetime.now().isoformat()}\n")
                except Exception:
                    pass
                await websocket.accept()
                try:
                    with open(root/"logs"/"ws_trace.log", "a", encoding="utf-8") as f:
                        f.write(f"ACCEPTED /ws/{{client_id}} id={client_id} at {datetime.now().isoformat()}\n")
                except Exception:
                    pass
            except Exception as e:
                try:
                    with open(root/"logs"/"ws_trace.log", "a", encoding="utf-8") as f:
                        f.write(f"ERROR /ws/{{client_id}} id={client_id} before accept: {e}\n")
                except Exception:
                    pass
                raise
            try:
                while True:
                    message = await websocket.receive_text()
                    try:
                        data = json.loads(message)
                    except Exception:
                        data = {}
                    if isinstance(data, dict) and data.get("type") == "ping":
                        await websocket.send_json({
                            "type": "pong",
                            "client_id": client_id,
                            "timestamp": datetime.now().isoformat(),
                        })
                    else:
                        # Provide a useful default payload
                        stats = None
                        if self.merger:
                            try:
                                stats = await self.merger.get_statistics()
                            except Exception:
                                stats = None
                        await websocket.send_json({
                            "type": "ack",
                            "client_id": client_id,
                            "received": data,
                            "statistics": stats,
                            "timestamp": datetime.now().isoformat(),
                        })
            except WebSocketDisconnect:  # pragma: no cover
                logger.info("WebSocket client %s disconnected", client_id)
            except Exception as e:  # pragma: no cover
                logger.error("WebSocket error for %s: %s", client_id, e)

        # Explicit test client endpoint used by some integration tests
        @app.websocket("/ws/test_client")
        async def websocket_test_client(websocket: WebSocket) -> None:
            try:
                try:
                    root = Path(__file__).resolve().parents[3]
                    (root/"logs").mkdir(parents=True, exist_ok=True)
                    with open(root/"logs"/"ws_trace.log", "a", encoding="utf-8") as f:
                        f.write(f"ENTER /ws/test_client at {datetime.now().isoformat()}\n")
                except Exception:
                    pass
                await websocket.accept()
                try:
                    with open(root/"logs"/"ws_trace.log", "a", encoding="utf-8") as f:
                        f.write(f"ACCEPTED /ws/test_client at {datetime.now().isoformat()}\n")
                except Exception:
                    pass
            except Exception as e:
                try:
                    with open(root/"logs"/"ws_trace.log", "a", encoding="utf-8") as f:
                        f.write(f"ERROR /ws/test_client before accept: {e}\n")
                except Exception:
                    pass
                raise
            try:
                while True:
                    message = await websocket.receive_text()
                    try:
                        data = json.loads(message)
                    except Exception:
                        data = {}
                    if isinstance(data, dict) and data.get("type") == "ping":
                        await websocket.send_json({
                            "type": "pong",
                            "timestamp": datetime.now().isoformat(),
                        })
                    else:
